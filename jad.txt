TODO - for extension purposes, add subversion (just in case its useful), and featurelevel (in case we need discs to demand a certain hardware featurelevel for decoding)

The JAD/JAC format is designed for use with the JAD library.
It is designed to be simple and compact for embedded platforms.
Consequently the storage is not as compact as it could be.
All values are little endian.

TODO - use sha or md5? sha256 is 32B.. md5 is 16B.. sha1 is 20B.. supposedly md5 is fast. maybe use the one with small code
TODO - consider baking in an offset to the sector data. will be convenient for hex editors and simple tools.

== JADJAC format ==

Every JAD or JAC file begins this way. The header is designed to be blittable.

ofs | type       | comment
----+------------+----------------------------------------------------------------------------------------
000 | char[8]    | magic ASCII word "JADJAC!\1". The non-ascii 0x01 is helpful for distinguishing textfiles happening to start with this.
008 | u32        | version
00C | u32        | flags 
                 | flags:0 - JAC subformat
                 | flags:1 - file was written as big endian. This is probably a bad idea, but it's available in case you want to receive big endian files on big endian systems.
010 | u64        | offset to metadata/tags
018 | u32        | numSectors - number of sectors actually stored in the file
01C | u8[4]      | struct jadTOC { u8 firstTrack, lastTrack, flags, reserved; }
020 | u8[101*16] | 101x jadTOCEntry. The first entry is wasted space, to maintain convenience and bilittability
670 |

For JAD, the raw sector data comes next.
For JAC, the index comes next, followed by the individual sectors compressed.

Finally, the metadata will show up.

== JAD subformat ==


===================================================
library structure

The library does not do any independent memory allocation or file IO. These are handled through the jadStream and jadAllocator interfaces.
